// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        var int i = 0;
        var int s = 1;
        while (i < 16) {
            let twoToThe[i] = t;
            let t = t + t;
            let i = i + 1;
        }
        return;
    }

    function boolean bit(int n, int i) {
        return twoToThe[i] & n > 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0){
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum = 0;
        var int shiftedX = x;
        var int index = 0;
        while (index < 16) {
            if(Math.bit(y,index)) {
                let sum = sum + shiftedX;
            }
            shiftedX = shiftedX * 2;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absx, absy;
        let absx = Math.abs(x);
        let absy = Math.abs(y);

        if (ny > nx | ) {
            return 0;
        }
        let q = divide(nx, 2*ny);
        if ((nx - (2 * q * ny)) < ny) {
            if ((x < 0 & y > 0) | (x > 0 & y < 0)){
                let q = -q
            }
            return (2 * q);
        }
        else {
            if ((x < 0 & y > 0) | (x > 0 & y < 0)){
                let q = -q
            }
            return ((2 * q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int ans, ansq;
        var int y = 0;
        var int j = 7;
        while (j > -1) {
            let ans = y + twoToThe[j];
            let ansq = ans * ans;
            if ((ansq > 0) & ((ansq < x) | (ansq = x))) {
                let y = ans;
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        return a;
    }
}
